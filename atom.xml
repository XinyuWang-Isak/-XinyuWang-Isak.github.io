<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://XinyuWang-Isak.github.io</id>
    <title>Isak&apos;s Study Life</title>
    <updated>2021-07-15T14:09:32.127Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://XinyuWang-Isak.github.io"/>
    <link rel="self" href="https://XinyuWang-Isak.github.io/atom.xml"/>
    <subtitle>Be a better person than yesterday.</subtitle>
    <logo>https://XinyuWang-Isak.github.io/images/avatar.png</logo>
    <icon>https://XinyuWang-Isak.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Isak&apos;s Study Life</rights>
    <entry>
        <title type="html"><![CDATA[Java.Thread]]></title>
        <id>https://XinyuWang-Isak.github.io/javathread/</id>
        <link href="https://XinyuWang-Isak.github.io/javathread/">
        </link>
        <updated>2021-07-15T05:49:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-thread-runnable-callable">1. Thread, Runnable, Callable</h1>
<h2 id="11-thread-extend-class-thread">1.1 Thread extend Class Thread</h2>
<p>There are two ways to create a new thread:</p>
<h3 id="111-declare-a-class-as-a-sub-class-of-thread">1.1.1 Declare a class as a sub class of Thread.</h3>
<p>This sub class should override run() method.</p>
<pre><code>// Create Thread: Extend Class Thread, override run() method, call start to open thread.
public class ThreadTest extends Thread
{
    @Override
    public void run()
    {
        for (int i = 1; i &lt; 200; i++)
        {
            System.out.println(&quot;Learning &quot;+i);
        }
    }

    public static void main(String[] args)
    {
        //main Thread.

        //Create a thread object.
        ThreadTest threadTest = new ThreadTest();

        //Call start()to open thread.
        threadTest.start();

        for (int i = 1; i &lt; 200; i++)
        {
            System.out.println(&quot;Coding &quot;+i);
        }
    }
}
</code></pre>
<h3 id="112-declare-a-class-as-an-implementation-class-of-the-runnable-interface">1.1.2 Declare a class as an implementation class of the Runnable interface.</h3>
<p>That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>
<pre><code>//Implement runnable interface, override run() method, initialise and call the start() method.
public class ThreadTest3 implements Runnable
{

    @Override
    public void run()
    {
        for (int i = 0; i &lt; 200; i++)
        {
            System.out.println(&quot;Learning: &quot; + i);
        }
    }

    public static void main(String[] args)
    {
        //Create the implement class object of runnable interface.
        ThreadTest3 testThread3 = new ThreadTest3();
        //Create the Thread object, start the execution by the object.
        new Thread(testThread3).start();

        for (int i = 0; i &lt; 200; i++)
        {
            System.out.println(&quot;Coding: &quot; + i);
        }

    }
}
</code></pre>
<h3 id="113-summary">1.1.3 Summary</h3>
<p>Two ways to create a new thread of execution</p>
<p>(1) Extend Class</p>
<ul>
<li>Sub class extends Thread to have ability of multiple threads.</li>
<li>Start thread: SubclassObject.start();</li>
<li>Not recommended: The limitation of Java single inheritance.</li>
</ul>
<p>(2) Implement  interface</p>
<ul>
<li>Declare a class implements the Runnable interface.</li>
<li>Start thread: Pass an object of this ImplementedClass as a parameter into Thread Class's constructor.<br>
ThreadTest threadTest = new ThreadTest();<br>
Thread thread = new Thread(threadTest);<br>
thread.start();</li>
<li>Recommended: Avoid the Java single inheritance's limitation. Flexible and convinent for an object to be used by multiple threads.</li>
</ul>
]]></content>
    </entry>
</feed>